// Code generated by go-bindata.
// sources:
// ../dist/tcptracer-ebpf.o
// DO NOT EDIT!

package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tcptracerEbpfO = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x5c\x7d\x6c\x5b\xd7\x75\xbf\x8f\x1f\x16\x25\xd7\x93\xe2\x84\x89\xcc\x26\x9d\xdc\x04\xad\xc6\xa5\x09\xf5\x61\x89\x61\xb2\x56\x73\x9a\x44\xd3\xdc\x4a\x70\xad\x56\x30\x10\xd0\x0c\x2d\x5b\x32\x15\x9b\x16\xe9\x48\x4f\x0c\x50\xb7\x49\x06\x47\xc8\x1f\x72\x92\x61\x5a\xe6\x75\xa2\x2c\x27\xca\xb0\x0d\x1e\xb0\xc2\x42\xd7\x95\x46\x97\x02\x06\x56\x0c\xc2\x90\x0d\xc6\xe0\x0d\xfa\x23\xcd\xb4\xad\x45\xb5\xc5\xcb\xb4\xd6\x08\x07\xde\xf3\x7b\x7c\xef\x9d\x77\xdf\x23\x25\xa7\x2d\x81\xf4\xfa\x9c\x77\xcf\xc7\xbd\xf7\xdc\x73\x7f\xe7\xbe\xa7\x7e\xfd\x89\x03\x4f\xfa\x34\x4d\x18\x3f\x4d\xfc\xaf\x30\x29\xf3\x37\xfd\x84\xf9\xef\x3e\xfc\xef\x5e\xa1\x89\xd2\xdd\xc4\x7b\x49\x08\xf1\x6b\x42\x88\x42\xd3\x46\xb9\x42\xeb\xa9\xac\xe4\x17\x22\x9b\x92\x2e\x2d\x52\xbf\x06\x9f\x10\x1b\xe5\x72\xb9\x74\x11\xb4\x5f\x88\xcd\x72\xb9\xdc\xca\x8c\x5e\x09\x98\x7a\x7d\x15\x1a\xfc\xdf\x47\xab\xdf\x33\xc4\xec\xf6\x4b\x3b\x57\xa0\xa7\x10\xe9\x73\xd8\xed\x57\xd8\x79\x49\x8e\x59\x88\xb0\xd8\x29\x9f\xe8\x3b\x88\x5f\x8f\x9c\x5f\x08\x71\xbc\x41\x88\x36\x21\xc4\x14\xda\xe1\x06\x9f\xc6\xe5\xfb\x3c\xec\x96\x1a\x88\x0e\x37\xfc\x9c\xc6\x75\x1a\xb4\xf6\x7f\x44\x17\x31\x2e\x1f\xc6\x15\x8d\xd1\xfc\xe6\xd0\xcf\xff\x65\xe9\xc7\xb0\xff\x03\xa9\x4f\x9f\x0c\x49\xfe\xd3\xbb\xff\x8b\xe6\xb1\x11\x72\x6f\xac\x97\xa9\x5d\x43\x7b\x1d\xed\x2a\xda\x6b\x68\xaf\xa2\x5d\x41\x7b\x19\xed\x32\xda\x05\xb4\xf3\x55\xbf\x7c\xd2\xaf\x31\xe2\x47\xb2\xe4\xdf\xe9\x16\xac\xc3\x34\xd1\x93\xad\xf0\xbf\x9d\xfa\x45\xcf\x82\xdf\x06\x7e\x1b\xf8\xe7\x88\x9f\x6d\x27\x7e\xd3\x1c\xd1\x67\x62\x44\x1f\x26\xbb\x7a\x3e\x4e\xf3\x33\x4d\xd1\x58\x98\x85\x7f\x03\xe4\x9f\x3e\xdd\x4f\xcf\x27\x87\xa0\x1f\xe3\x99\xbd\x6c\x1b\x67\x6a\x32\x2f\x9f\xa7\xa3\x37\xe0\xcf\x34\x68\x9a\xa7\xd2\x6f\xd0\xfc\x4d\x35\xd2\xfa\x66\xde\x78\x4f\xf2\xa7\x7c\x42\x54\x3c\xca\x44\xdf\x87\x9e\x2c\xe4\x68\x5e\xc7\x27\xcf\x4a\x3a\x13\x5d\xc7\xf3\xa3\x92\x3e\xee\x23\x3d\x29\xfd\x88\xa4\x07\x5f\x25\xfd\x29\x7d\x8c\xda\xdc\x04\xf5\xf3\x53\xbf\xc1\xd7\xb0\x7e\x09\xac\x53\x94\xd6\x69\x54\x4b\xc9\x79\x0f\x6b\xcf\x23\x5e\x5e\xa5\x38\xd6\x34\xc9\x0f\x8a\xbf\xa4\xf5\x47\xdc\x65\x22\x07\xa5\x5c\xf3\xef\x11\x5d\x2a\x22\x3e\x35\x21\x0e\x96\xcb\x65\x63\x1d\x4b\x69\x33\x3e\x2b\x5b\x70\xbc\x48\x72\x99\x08\x8d\x23\x28\xbe\x85\x71\x8e\x94\xa9\xbd\x45\xcf\xa3\x87\xd0\x7e\x08\x3f\xc7\xf0\x7c\x13\xf1\x40\xeb\x6f\xe8\x6f\xbe\xd3\xe9\xc7\x08\xfc\x08\x58\xec\xeb\xa7\xdb\x6a\xca\xdd\x52\xca\xb5\xd7\x94\x3b\x64\x19\xb7\x29\x17\xab\x29\xf7\xa1\x52\x8e\xe2\xb1\xf9\x6e\x67\xff\x31\xf4\x0f\x29\xe6\x57\x3f\x4d\xf1\xab\x5f\xa4\xf9\x52\xd9\xdb\x54\x8c\x2f\xb5\x84\xf9\x1f\xa0\x7c\x90\xba\x48\xeb\x90\x4e\x74\x53\xfc\x2d\x1a\xeb\x11\x27\xba\xf8\x21\xd6\x31\x41\xfd\x2f\xd1\xba\xa4\x0f\x3f\x26\xdb\x70\x20\x63\x8b\xbb\x29\xb4\x61\x3f\xc5\xe5\xd7\x7c\x42\x94\xcb\x42\x84\x7d\xc7\x88\xd6\x40\x6b\x14\xd7\x46\x9e\x2a\x44\xc6\x58\x1e\x9e\xb6\xe5\x05\xeb\xb8\xb2\x18\x57\x0b\xc6\xd5\xc2\xf2\x66\x8c\x9d\x13\x63\x8a\x3c\x1a\x14\x07\x65\x1b\xd6\x3e\x2b\xf3\x60\x58\xfb\x2d\x39\x3f\x95\x7d\x10\x94\xcf\x69\xff\x1b\xfe\xa4\x23\x87\xe0\x0f\xcd\x5f\xf3\x93\xee\x71\xe8\xbd\x5e\x23\xae\xeb\x75\x48\xb1\x5e\xc7\x05\xe6\x15\x6d\x65\x1c\xff\x5d\x2e\x97\x8d\x71\x3c\xdd\xd2\x51\xf5\x53\x93\xfe\x5d\xc5\x7e\x8b\x31\xff\x69\x9d\xf5\x22\xe5\x51\x55\xbc\x59\xf7\x03\xf7\x3f\x55\x44\x9c\x44\x6e\x40\xff\x03\x36\xfd\x99\x08\xc5\x49\xf3\x0e\xa7\xde\x0f\x3d\xf3\x84\x11\x5f\xef\x41\xef\x1e\xe6\x37\xf2\x40\xb1\xcd\xd5\xef\x4d\x4f\xbf\x11\xaf\x91\x35\xe8\xdf\xc5\xfc\x3e\x46\x7a\xbf\xea\xd4\x7b\xcc\xd3\xef\x63\xf0\xfb\x7d\xe8\xa5\x83\x36\x55\x3c\x04\x7b\xd7\x1d\x38\xa2\x9e\xb8\xac\x85\x5f\x7e\x65\xb8\xa9\x95\xe3\xa6\x21\xb6\x5f\xfb\x1d\x76\x87\xbc\xf0\x0b\xe2\x24\xbc\xe3\x96\xa8\x57\xae\xb2\x4f\xf5\x63\xc2\xd1\xdf\x0b\x9f\x99\x38\xe9\xa7\x34\x8e\x2a\x4e\xfa\x09\xd1\x8b\x7c\x1c\x6d\x65\x7b\xbf\x83\x84\x93\xb4\x7f\x23\x9c\x74\x1a\x38\x69\xef\x8f\x84\x5d\x0e\xb8\x28\x82\xf3\x36\x02\x5c\x84\xfd\x58\x88\x00\x47\x44\x80\x23\x22\xc0\x1d\x11\xe0\xa2\xc8\x3c\xda\x39\xb4\x84\x67\xae\xf8\x81\x93\x12\x23\x38\x1f\x8f\x00\x6f\x10\x4e\xd2\x73\xc0\x47\x89\xac\xed\xfc\xd4\x73\x74\xfe\xe9\x79\xe0\xa1\x01\xc2\x4d\x85\x04\x70\x55\x2e\x86\xe7\x71\x3c\x87\xdd\x04\x70\x54\x0e\xf9\x2a\xdf\x8f\xe7\xf0\x33\x01\x1c\x95\x03\x3e\x4a\x2c\xdb\xc6\x95\xca\x03\x17\x0d\xfc\x10\x78\x0b\xb8\x68\x80\xe6\xa5\x84\x7a\x60\x2a\x08\x5c\x74\xf8\x5d\xc2\x45\x01\xe0\xa2\x81\x7f\x82\x1e\xe0\xa2\x01\x9a\xc7\xf1\x3c\x70\xd1\xc0\x75\x3c\x07\xde\x09\x00\x17\x9d\xa1\xf3\x66\xf0\x10\xd6\x63\x00\x38\x2d\x4f\x78\x29\x75\x06\x38\x0a\x76\x07\xe1\x47\xe1\xb0\xb1\x2e\x71\xb4\x74\x2e\x0e\xfb\xde\x16\x95\x10\x2d\xbd\x85\x38\x6b\x10\x62\xa5\x5c\x2e\x37\xf7\x20\xfe\x2c\x79\x22\x66\x39\x8f\x1c\x79\xbf\x08\xbd\xf7\x50\xdc\xe8\xc5\x18\x68\xe8\xb1\xc4\x71\x1b\xdb\xa7\x23\xca\x73\xeb\x75\x1a\x47\x08\xe7\x02\xda\xe1\xd0\x6b\x2c\x1e\x61\x07\xf1\x5c\x88\x6c\xa0\x5d\x47\xde\xfa\x19\xda\x4d\xf0\xd7\x90\xb7\x70\x4e\x9c\xa6\xf5\xe5\x78\xa6\xe2\x57\x8b\xcb\xf8\x43\xb6\xf3\xce\x5d\xbe\x95\xc9\xb7\x6d\x41\xde\x2a\xb7\xb1\x45\xbb\x21\x26\xbf\xae\x94\xaf\x8d\xff\x7e\xb6\x4d\xfc\xb7\xb9\x45\xfc\xb7\x56\x17\x9e\x58\x73\xc5\x13\x4a\x7c\xfb\x36\xe2\xe2\x0d\xca\x27\xfa\x9b\x88\x8f\x13\x94\x57\x4a\x29\x92\x1f\x3c\x4f\xad\xfe\x16\xe2\x66\x06\x79\x65\x19\xf5\xe0\x2c\xe5\x9b\xf1\x25\xc4\xd1\xc0\x34\xf0\xe3\x26\xf0\xe3\x0c\xc3\x97\xcf\x13\x5e\xd4\x3e\x4f\x7e\x7e\x03\x76\xaa\x79\xf6\x51\xe2\xff\x36\xd1\x26\x4e\xa4\xf9\x29\xed\xe5\xfc\x7d\x92\x2e\x0c\x84\x90\x97\x5a\x90\xff\x5a\x59\x3e\xef\xb3\xed\x6f\xbd\x38\x64\xdb\xe7\xd6\xf9\x8a\x2b\x70\xe5\x70\x23\x1d\x54\xc6\xbc\x1c\xd7\xb0\xef\xd0\xb6\xca\x63\xdf\xc4\x63\xf7\xed\xa5\x03\x67\xb8\x61\x8f\x6d\x9c\xb5\xe4\x9e\xde\x4b\x0b\x38\xb5\x83\x9e\xa7\x4f\xd0\xba\x18\xfb\x3b\x3d\xfb\x00\xfc\xa7\xf1\xde\xd0\xc8\xbf\x4c\xa4\x1d\xfc\x56\xc6\x8f\x82\xdf\x82\x7d\xfd\xa0\xe3\x7c\xe6\xf9\x26\xa6\xcc\x37\x18\xbf\x45\x6e\xa4\x0e\xb9\xad\xe0\x98\x90\xc4\x13\x71\xb6\x6e\x94\xe7\xf5\xe3\x94\xd7\xf5\xb1\xac\xc3\x8f\xeb\x5e\xe7\x3e\xee\x2f\xc2\x8d\x94\xc0\x75\xc4\xf3\xb0\x76\x49\x9e\xe7\xa5\xd3\xea\x75\xa9\xe0\xff\x06\xd9\x6f\x41\xea\xe1\x71\x94\xc1\x39\x57\xef\x3d\x4d\x18\xb8\x50\xc7\xf3\xb0\xd6\x24\xed\xdf\xbe\xde\x57\xb0\x3e\x2f\x43\x3f\x9d\xd3\xa5\x17\xa8\x9f\x2a\x1f\x5c\x56\xe4\x9f\xf1\x22\xd9\x1d\xd6\x7e\x52\xf6\xd9\x70\xf7\x65\xc4\xcd\x06\xfc\x5b\x43\x7b\xab\x6c\xf5\x3b\x8d\xf3\x44\x3f\xdf\x5a\xb7\x7d\x5b\x3e\x3a\xdf\x56\x53\x6e\x43\x29\xd7\x5e\x53\x6e\x4d\x95\x6f\xcf\xc7\x6a\xca\xdd\x52\xca\x21\x4f\xb7\x3a\xfb\xf7\x59\xf3\xf4\x0b\xe6\x3a\x91\x9c\x91\xa7\xfb\x5c\xf3\xf4\xba\xb2\x4e\xc7\xfc\x0f\xcc\x23\x8f\x6e\x20\x8f\x5e\x40\x9e\xc5\x7a\x44\x09\x97\x8d\xa3\x3e\xcb\x44\x16\xa9\xff\x25\x5a\x97\xf4\xe1\x25\xca\xbb\x01\x2a\x58\x9d\x75\xfa\xe3\x92\x6f\xd6\xe9\x94\x80\xcd\x3c\xfb\x05\x92\x73\xdc\x57\xd2\x3e\x09\x8a\x2e\xc1\xe3\x76\xde\x33\x6e\x29\x6f\x5f\x01\x2e\x2f\xcc\x00\x1f\xcf\x00\x87\xcd\x5c\x76\xe4\x65\x23\x6e\x24\x6e\xf0\xdb\xe7\xf7\x25\xe9\x43\x25\x7f\xd0\xfc\xea\x17\x29\x8f\xf0\x71\x16\x12\xe6\x3d\xaf\x26\xe3\x96\xce\x81\x54\xf1\xaf\x10\xc7\x87\x40\xcf\x83\x1e\x03\x7d\x01\xf4\x04\x68\x9a\xef\xd2\x6e\xf2\xe3\x06\xce\x8b\x4c\x94\xce\xc3\x29\xe4\x5f\x33\x0f\x4f\x42\x6e\x09\x7a\xf2\xd4\xce\x4c\xa3\x7d\x1e\x79\xda\xa8\x13\x80\xef\x8b\x06\x2e\xa5\x73\xba\xb4\x84\xf9\x08\x50\xbc\x19\xe7\x51\xab\xcf\x3e\xcf\x57\x82\x74\xcf\x5e\x99\x97\x3d\x75\xae\x8b\xdf\x52\xbf\x9a\x79\xca\x47\x79\x0a\xfd\xaa\x75\xe0\x6d\xe7\x99\xff\x29\x37\x29\xcf\xe7\xf9\xed\xe1\xd4\xf3\x43\x4a\x7f\x54\x38\xb5\x4f\x85\xf7\x3c\xe4\x39\x4e\x9d\xdf\x82\x7c\x4d\x9c\xea\x61\xb7\x2e\x9c\x5a\x47\xfe\x53\xe2\xd4\x3a\xf2\x9f\x12\xa7\x7a\xe4\xbf\xb5\xba\xf2\xdf\x16\x71\x6a\xb1\xcf\x56\x57\xea\x97\x10\x1f\xa8\xd7\x06\xc3\x88\x47\xe4\xc5\x42\x82\xf6\x8f\xbe\x04\x7c\x6a\xd4\x8d\x8b\x88\x9f\xe8\x2a\xf2\x24\xf0\x69\xe4\x1f\x68\x5f\x2e\x00\x9f\x36\x51\x1d\x1a\x0e\x16\x49\x7f\x37\xe9\x0f\x07\xfe\x44\xd2\x66\x7e\xfc\x63\xa2\xab\xf9\xf1\x8f\x28\xdf\x38\xf2\xe3\x0e\x99\x1f\xad\xfb\xef\xb2\xe7\xfe\x7b\xd5\x71\xfe\xbb\xf5\xc7\xf9\x4f\xf9\xac\x9a\x47\x51\x87\xcf\xa0\x4e\x9f\x99\x77\xe4\xd1\xf9\x5f\x68\x1e\xbd\x60\xcb\xa3\x3a\xf6\xbb\xbe\x88\x3c\x86\xfc\x68\xdc\xf3\x1a\xf9\x4e\x5f\xc4\x3d\x09\xde\xeb\x54\xdf\xfb\x14\x57\x5d\xf2\x2c\xdd\x4f\x70\xfc\x5c\xba\x8b\xda\x24\x5d\x4b\xca\xfb\x04\x99\x87\xd1\x66\x06\x66\xab\xf9\x59\xe2\xe9\xc8\x2b\xc8\xbf\x73\x68\x5f\x87\xdd\x65\x96\x87\x17\xb6\x9d\x87\x47\x2c\x79\x38\x28\xbe\x47\xf2\xc0\xbd\x1c\xe7\x9a\xf7\x6a\xb1\x2a\x2d\xf7\x53\x08\x71\x3e\xbe\x45\xfc\x5b\xbd\xf7\x7a\x90\xe4\x81\x77\x87\xb5\xa8\x8c\xb7\xc2\x09\xaa\x1b\x4a\x78\xaf\x73\x05\x76\x0a\xb3\xb4\x1e\xe9\x59\xda\x0f\x46\x7d\x5a\xc2\xfb\x24\xd5\xfe\xbd\xa6\xac\xa3\x8d\x7d\x7f\xcd\x75\xdf\xbf\xab\xd8\xf7\x85\x59\x8a\xbb\xcc\xec\x82\x63\x3f\xc4\xb7\x84\xb3\x9b\x09\xe7\x8f\x61\xfe\xde\x6c\x67\xf5\x05\xec\x44\x6e\xd7\xce\x57\xbc\xcf\x49\x8f\x79\x5b\x50\x9e\x93\xf0\x87\xf9\x3d\xac\xad\x33\x7c\x3e\x57\x03\x9f\xc7\xed\xf8\xdc\x78\x8f\xe6\xe1\xcf\x9c\xd7\x7b\x34\x0f\x39\x25\x3e\x37\xee\x51\x3c\xe4\x94\xf8\xdc\xb8\x47\xf1\x90\x53\xe2\x73\xe3\x1e\x65\x8f\xb3\x7f\xdc\x7a\x3e\xbd\x66\xae\xa7\x3d\x4e\xe3\x5b\xc4\xe7\x98\x7f\xdc\x8b\x9a\xf8\x7c\x89\xe1\xf3\x65\x86\xcf\xff\x94\xe1\xf3\x3f\x03\x3e\xa7\x0d\xeb\xc4\xe7\x54\x48\x9b\xe7\x0f\xc5\x9f\x71\xfe\x0c\x6b\xab\xe4\xaf\x25\x7e\x2b\x71\x15\x14\x7f\xfb\xb1\xc4\xe1\xb0\xb6\xc4\xf0\x9a\x71\x4f\x3a\xb7\x3d\xbc\x66\xdc\xcf\x31\x7f\x54\x78\x2d\xee\x75\xbf\xa7\x90\xe7\x78\x6d\x6e\x0b\xf2\x75\xdf\x2b\x2a\xec\x6e\xe9\x5e\xd1\xc3\xae\xe7\xbd\xa2\x87\x9c\xe7\xbd\xa2\x62\x3f\xac\xd5\xb5\x1f\xb6\x88\xd7\x96\x10\x17\xc6\x77\x14\x17\x8d\xf7\x09\xcb\x38\xe7\x11\x27\x51\xe0\x82\x22\x70\x1a\xde\x8b\x8c\x2f\x20\x6e\x9a\x08\x17\x8c\xe3\x3d\x73\xe6\xf0\xf7\x69\xbf\xbc\x05\x9c\x36\xf3\x0e\xe5\xc7\x5e\xf2\x67\xf0\x29\x6a\xc3\x0d\xe3\xe4\x27\xee\xd5\x07\x3f\x6b\xf0\xf1\xde\x19\x68\x21\x2c\xe8\x3d\xc0\xd7\x82\xa0\x83\xcf\x48\x7a\x38\x10\x94\x2d\xdf\x7f\xad\x72\xfb\x59\xee\xf7\x1e\xa7\xfb\xb0\x61\xdf\x2c\xf5\xaf\x79\xaf\xf7\x52\x75\x7e\x83\x96\x7b\x2e\x7e\x7f\x5f\x98\xed\xab\x9e\x4f\x7e\xb9\x5f\xfa\x31\x4f\x31\x86\x5b\x0e\xb0\x73\x0c\xef\x85\x0c\x1c\xb6\x48\xf9\x24\x8d\xf7\x44\xa9\xc5\xef\x82\x3e\x8a\x75\xa0\xf9\x2d\xdd\x4f\xf2\x37\xb0\xef\x32\x09\xc2\x65\xad\x0d\x76\xff\x8d\x7e\x49\x7c\x37\x34\x85\xfe\xa6\xdc\x09\xf2\x0f\xdf\xa7\xa4\xa3\x13\xd8\xef\x59\xb4\x79\x07\x0e\x1d\x52\xdc\xb3\xea\x45\xd4\xdb\x8b\xc0\x87\x17\x71\x1f\x0d\x1c\x3e\x85\xf7\x3c\x25\xda\x0e\x8e\xf7\xe2\x25\xd4\x03\x61\x81\x73\xce\xa0\x03\x04\xb8\x4a\xf4\xba\xac\x1a\x07\x66\xff\xdd\xb6\xe7\xc9\xac\xb0\xcb\x4b\x54\x66\xc7\x7d\x71\x0f\xdc\x67\xd4\x3f\xbc\x0e\x37\xc6\xe7\x3a\xae\xdd\x76\xbb\xe9\x84\x71\xbe\x10\x2e\xbd\x11\xc4\x7c\xe3\x3b\xa6\xe4\x24\xe4\x31\x8f\x26\x3e\x7e\x83\xc5\xcb\x05\x07\xbe\x99\xf3\xac\x43\xde\xff\x88\xf7\x5f\xf0\xec\xbf\xf6\x91\xf8\xa5\xc6\xf7\x02\x8b\xef\x25\x5b\x7c\xa7\x16\x97\x3d\xe3\xdb\x39\x5f\x27\xd8\xbe\xd9\x5e\xfc\xde\x6e\x7c\x04\xc5\x95\x5f\xea\x3c\xea\x8b\x46\x9e\x46\xbd\x83\xf9\xa9\xbe\x5f\x5e\x44\x9e\xbe\x88\xfa\x0d\xef\x8d\x8d\x3a\xce\x3d\x8f\x50\x1d\xd7\x2a\xeb\x4b\x4b\x1e\x41\x5d\x96\xb4\xc4\xbd\xbd\x3e\xfb\x26\xcb\x23\x2f\x62\xfe\xcf\xa1\x7d\xe5\x17\xb6\x0e\x23\x72\xce\xff\x9e\xe6\xab\xfa\xbd\xa4\x81\x5f\x30\xbf\x7b\xec\xdf\x3f\x18\xdf\x2f\xf0\x3a\x2d\xdc\x48\xf7\xa7\xd6\xfd\xa3\xfa\xde\xc2\x59\xa7\x25\x64\x6b\xd6\x69\x71\xaa\xd3\x8c\xf5\x86\xfe\xcc\x2c\xbe\x97\x99\xbd\x09\x3c\x55\x1b\x1f\xdc\xdc\x02\xae\x68\xc0\xf7\x06\xb5\xbe\x5b\x2b\xcc\x02\xbf\xce\x6e\xd4\x5d\x27\xaa\x71\x91\x81\x37\xd6\x5d\xf1\x86\xaa\xbe\x28\xcc\xce\x61\x1e\x86\xea\xce\x6f\xea\xfa\x6d\x17\x7b\x1f\x03\xbd\x91\xdb\xd5\xfb\xa5\x6d\xd7\x85\x32\xae\x43\x78\x6f\xe6\xc0\xe5\x43\xc0\xe5\xff\x5e\xf6\xd9\xf2\x05\xbe\x77\xc5\xbd\x19\xc7\x25\xfc\x9e\x35\x8d\xfa\xda\xac\x27\xbd\xbf\x53\x49\x01\xbf\xa5\xa3\xef\x60\x3f\xe2\x9e\x20\x42\xdf\x79\x98\xef\x2d\x97\x10\x0f\xb5\xeb\xcd\x15\x8f\x7a\x53\x85\x5b\xbf\x6b\xfd\xce\x8b\xe1\x56\xf3\x3b\x32\xe0\xc7\x22\xed\x0f\xf3\x1e\xfe\xfb\x8e\xfc\xb1\xac\xc4\x21\x34\x7e\xe3\x3c\x36\xbe\xbb\x35\xf2\x52\xd8\xf7\x03\xca\x6f\x96\x7c\x52\x99\xc2\xcf\xed\x06\x4e\xc5\xbd\x96\x21\x6f\xd6\x6d\xdf\x53\xae\x0b\xe5\x1b\x4d\x7c\x6e\xf7\x77\x48\xce\x92\xbf\x2a\xf1\x66\x7c\x1f\xc9\xf3\x97\xf1\x3e\x29\x28\x66\x3f\xe6\xb8\x7a\x5b\xd6\x7b\x1f\x5f\x5c\x6d\xef\xbb\x28\x33\xde\x6e\x20\xce\x8c\x3a\xf2\x3d\x97\x78\xab\x5d\xd7\xa9\xef\xa9\xea\xaf\xeb\x56\xb7\x28\xcf\xeb\xd9\x15\x0f\x79\x23\xde\x1b\x1a\x9d\x75\xec\x55\x8f\x7a\xcd\x8c\xfb\xeb\x2e\x71\xff\xcf\x75\xc6\xbd\x71\x1f\x4b\xeb\x31\xec\xc3\x7b\x7f\x8c\xa7\x76\x5d\xd4\x88\xb8\xa4\x75\xd6\x97\x68\x9d\x87\x03\x8f\x90\x9e\x7d\xd0\x83\xef\xaf\x8c\xef\xbf\x28\x4b\x58\xea\xa5\x60\x57\x75\x7c\x14\x7f\xc0\x2b\x6f\x21\xce\x66\x46\xaa\xf1\xe5\x93\xf1\x40\x78\x25\x7d\xe2\x28\xc3\x3b\xf6\xfb\xe6\xd4\x22\xf2\x56\x74\x1a\xf4\xbb\xa0\x9f\x07\x4d\xf3\x97\xc1\x3d\xf4\x54\x15\x1f\x7e\x93\xc5\x63\x6d\x5c\x32\xa6\x9c\xdf\xe9\x1a\x79\x25\xe1\x92\x57\x7a\x91\x57\xce\xba\xe4\x95\xae\x1a\x79\xe5\x61\x47\x5e\x19\xf2\xc8\x2b\x25\xd4\x79\x4e\x7c\xfa\x19\xd9\x7f\x10\xdf\xe1\x84\x35\xfa\x1e\x65\xf0\x71\xd0\xfe\x4f\xc3\xcf\xeb\x2e\x7e\x7e\xaa\x86\x9f\x91\x6d\xe5\x3f\x13\xbf\xfd\x07\xc9\x3b\xbe\x8f\x25\x1c\x67\xd4\x89\xe9\x26\xe0\xa6\xea\xf7\xb2\xeb\x8e\x73\xfe\xa6\xe7\x39\xdf\x24\xe9\x54\xf5\x9c\x27\x60\xc6\xf1\x9e\xf5\xfb\x98\xf5\x8f\xe5\x3b\x5f\xe7\x77\xbd\xf5\xe1\xca\x07\x94\xfe\xb9\xd5\x73\x1c\xcf\x9a\xfb\x70\xc5\xa5\x1e\xb9\x5a\xdd\x77\x01\x0b\x2e\x30\xf7\xa1\xfd\x7e\xd0\xb8\x0f\xe4\xdf\xcb\x9a\xdf\x97\x13\x9e\x48\x01\x07\x1b\xf7\xdb\xaa\x3c\xec\x86\xfb\x57\xb6\x51\x7f\xf1\xf9\x0f\x58\xfe\x13\x01\x77\x9e\x86\xf9\x0a\xd5\xc1\x6b\x31\xf2\x9d\x85\xd7\xae\xe0\x85\x14\x36\xdc\xec\x9e\xc3\xbf\x2b\xbf\xa7\x86\x0e\x88\x8f\x2c\x7f\x1b\xa0\xfa\xdd\x2f\xe5\x83\xa2\x65\x87\x9d\xff\x37\x7e\xe2\x6f\x30\xfe\x41\xf0\x97\x1b\xec\xfc\xbb\xc0\x6f\xf7\xdb\xf9\x7f\xe8\x23\xfe\x10\xeb\x3f\x09\x7e\x28\x64\xe7\x3f\x06\x7e\x8c\xd9\xbd\x13\x7e\x1e\x61\xfd\x3f\x80\xdd\x2c\xe3\xbf\x0b\xfe\x59\xe6\xcf\x41\xe8\x5f\x60\xfd\x1f\x00\xff\x32\xe3\x0f\x48\xf9\x46\x11\x63\xfe\x9f\xf7\x11\x7f\x8c\xf1\x4f\x80\x2f\x98\x9e\x6e\xf0\x63\x8c\xdf\x15\x20\x7e\x1f\xe3\xff\x2e\xfa\xcf\x31\xff\xbf\x2d\xe9\x9d\x62\x95\xf1\x3f\x01\xfe\x58\xd0\xce\x7f\xd9\x47\xfc\x79\xc6\x7f\x06\xfc\x65\xc6\x7f\x10\xfc\x15\xc6\xef\x84\xfe\x75\xe6\xe7\x2d\xf4\x6f\x6d\xb4\xf3\xbf\x85\xfe\xcb\x76\xb6\xf8\x11\xfa\xf3\x3f\x0e\x9d\x01\x7f\x88\xf1\x3f\x29\xe7\x67\x97\x18\x09\xd8\xf9\x3f\xf7\x13\xff\x5c\x93\x9d\x7f\x03\xfc\xeb\x8c\xbf\xdf\xe0\x33\xfd\x01\xf0\xb3\x4c\xff\x4e\xd8\x5d\x66\x7a\xfe\x1c\xfd\xaf\xb1\x75\xbf\xe9\x23\xfe\x26\xe3\xfb\xa1\xa7\x9d\xe9\xf9\x4f\xe8\x69\xfb\x84\x9d\xff\x43\xf0\x5b\x18\xff\x92\x8b\xff\x7f\x60\xf8\xcf\xf8\xf7\x83\x7f\x96\xf1\xff\x15\x7e\xae\x33\x7e\x42\xf6\x6f\x16\x2b\x6c\x1e\x0e\xfb\x88\xdf\xc7\xc6\xf5\x9b\x01\xe2\x9f\x63\xfc\x28\xf4\x84\x58\x3c\xfc\x18\x7a\x5a\x18\xff\x1b\xe0\xb7\x31\xfe\xbd\xd0\xb3\xc9\xfc\xfc\x22\xfa\x0f\xb1\x3c\x7e\x1f\xf8\x47\x18\xff\x07\x52\xcf\x1d\x62\xc5\xce\x16\xef\x49\xfe\x9d\x8e\x79\x0b\xc8\x73\xe4\x53\x82\xff\xbe\x24\xf1\xf3\xaf\x3b\xf8\x39\x89\xeb\xef\x71\xf0\xbf\x23\xf5\xb4\x3a\xf8\x9f\x97\x7a\xee\x75\xf0\x9f\x90\xe7\xc1\x27\x1d\xfc\x09\xd9\xff\x0e\x07\xff\x5f\x24\x7f\x97\x83\xff\x17\x92\xbf\xd3\xc1\xff\x47\xa9\xdf\xef\xe0\x3f\x2b\xf9\x0d\x0e\xfe\x57\xa5\x9e\x3b\x1d\xfc\x06\xd9\xbf\xd9\xc1\xff\x6b\xc9\x0f\x3a\xf8\x5f\x91\xfc\x46\x07\x3f\x29\xe7\x2d\xec\xe0\xbf\x29\xe7\xed\x6e\x07\xbf\x5d\xfa\x73\x9f\x83\xff\xb2\xd4\xb3\xc7\xc1\x5f\x95\x7a\x22\x0e\x7e\x3f\xda\xca\xb2\x57\x2a\x91\x38\xa3\xb3\x8c\xbe\x6c\xa1\x2b\xb2\x9b\x41\x93\xfe\x1d\x21\xc4\x5c\xc8\xfe\xdc\xaa\x3f\xc1\xf4\x27\x98\xfe\x0a\xbd\xc0\xf4\x4f\xfb\xed\xf4\x7a\x83\xdd\x5e\x9b\xc5\xde\x00\xb3\x57\xf9\xf7\x2a\xa3\xdb\x35\x3b\xbd\xe6\xb7\xeb\xeb\xb7\x8c\xe7\xc9\x8a\x7d\x36\xbe\x4d\x66\xaf\xbd\xd1\x4e\xaf\x36\x99\xf4\x53\x42\xe0\xaf\x24\x4d\x7b\x7d\xcc\xfe\x32\xa3\x57\x1b\xed\xf6\xcf\x35\xd9\xed\xaf\x34\xd9\xed\x6d\xec\x64\xfe\xee\xb2\xdb\x1f\x61\xf6\xaf\x31\x7b\x6d\x3e\x3b\x3d\x1f\xb0\xeb\xdb\x08\xd9\xe9\xf9\x46\xbb\x7e\xeb\x7c\x3f\x5a\x79\x6e\xa1\x1f\x03\x7e\xb3\xd2\x47\x18\xdd\xaf\xd9\xf5\x8b\x87\xf2\xa3\xd3\x79\x91\x99\x1c\xcd\x67\x27\x4f\x3d\x33\x9a\x4c\x8e\x9f\x1c\xcd\x27\xd3\xb9\x4c\x32\x95\x4e\x8f\x66\xf3\xe2\xa1\xc9\xd1\x89\xea\xe3\x87\xf9\xd3\x67\x53\xd9\xdc\xc3\xc7\x8e\x8e\x9f\xcc\xe5\x53\x13\x13\xc9\xc9\x51\x9b\xae\x7c\x3a\x9b\x7c\xae\x27\x99\x3e\x75\xf2\xe4\x68\x3a\x2f\x32\x6a\xb6\xdd\x82\xea\xa1\xf2\x09\xb7\xd3\xad\xb6\xd3\xed\x65\xa7\xdb\xd5\x8e\xf9\x44\x0e\x31\x9f\xce\xe6\x27\x53\xe9\xd1\xc9\x64\x2e\x9f\xca\x9f\xc9\xf1\x81\x67\xc7\x8f\xe6\x44\xf2\xb9\xd1\xc9\xdc\xf8\xa9\x93\x56\xd7\x8e\x1d\x4d\xa2\x4f\xd5\x2d\x0b\xcb\xee\x12\x7f\xe0\xe0\x5a\x07\x96\x1b\xcd\x4b\x5f\x46\xb9\xeb\xe6\x03\x6b\xf7\xf4\xc4\xa9\x9c\xa3\x2b\x31\x93\x13\xe3\xe9\xd1\x93\x95\xa7\xb9\xfc\x64\x3e\xf5\x8c\x78\x28\xa7\x3f\x5b\x69\x0f\xec\xdf\xdf\x93\x7c\xa4\xd2\x74\x24\x3b\x65\xdb\x9d\xec\x90\x6d\x17\xda\x0e\xb4\x3d\xc9\x38\xb1\xe3\xe8\x1d\x27\x6e\x47\x1c\x52\x78\xdc\x81\xe7\x06\xbf\x97\xba\x75\xf6\xa2\x5b\x2f\xba\xf5\xa2\x5b\x6f\x75\xf6\x93\xa3\xcf\x8d\x9e\xcc\x27\xc7\xb3\xcf\xf5\x10\x0f\xcb\x93\x3b\x95\xce\x58\xb8\xf9\x33\xd9\x89\xd1\xec\xf8\x51\x62\x1d\xd8\xbf\x7f\x5f\xb2\x87\x74\xf7\xc0\x14\xb8\x9d\x60\x1b\x74\x07\x68\x6a\x3b\xd0\xf6\x24\xf7\xd1\xe3\x7d\x90\xde\x07\x29\xd0\x1d\x78\x4c\x6d\x17\xda\x8e\x4a\xeb\x74\xbc\x5b\xe9\x78\xb7\xd3\xf1\x6e\x52\xda\x4d\xb6\x40\x75\xa1\xed\x04\xbb\xa3\x1b\xa6\x64\xdb\x9b\xec\x42\xb7\x2e\xac\x00\xe8\x0e\xd9\xc6\x93\x9d\x78\xdc\x89\xc7\xa0\x3b\x0c\x7e\x07\xb4\x77\xe0\x39\xe8\x0e\xd0\xd4\xf6\x24\x3b\x63\x34\xd0\x4e\xbc\xf7\xbe\xdd\xdf\x2e\x9f\x50\xa0\x02\x21\xe2\xf8\xbb\xab\x47\x19\x1e\x64\x70\x49\xd2\x95\xff\x58\xb9\x86\xff\x6f\x17\xe7\x2f\xc0\xed\x6b\xde\xf2\xd3\x8c\xcf\xca\x0f\xd1\xa8\x09\x05\xba\x10\x62\x99\xfe\xac\x4c\xe0\x35\xbe\xbc\x9b\xf0\x5b\xe4\x0d\xfe\x86\x8b\xff\x06\x5e\xbc\x1a\xf2\xb6\xff\x63\xa1\xb6\xbf\x02\xfb\x43\x16\xfb\x41\x85\xfd\x4b\x2e\xf6\xa7\xa1\xb4\xd6\xf8\x8b\x2e\xf6\x43\x5f\xb0\xdb\x69\x03\x76\xe3\xf6\xcf\xb9\xd8\xdf\x80\xd2\xa1\x1a\xe3\x7f\xd1\xc5\x7e\x2b\xec\x1f\xb1\xd8\x6f\x54\xd8\xbf\xe6\xb6\xfe\xb8\x2f\xdc\x6c\xf2\xb6\xff\x8e\xcb\xfa\x4f\xc3\xfe\x9c\xc5\xfe\x4e\x85\xfd\x0f\x5c\xec\xc7\x01\x35\x17\x76\x79\xdb\xff\xa9\x8b\xfd\x10\x02\xf8\xac\xc5\xfe\x2e\x85\xfd\xcf\xb8\xcc\xff\xf5\x28\xb5\x57\x1b\xbd\xed\x7f\xda\x65\xfe\xcf\xc1\xbe\x75\xfe\x9b\x15\xf6\x2f\xb8\x8c\x7f\x1e\xef\xe5\xaf\xf1\x71\xf1\x7e\x2e\xe3\x5f\xef\x33\xed\x1a\xed\x1d\x0a\xfb\x2f\xb8\xd8\x3f\x82\xf7\x03\xbc\x7e\xe5\xf6\xbf\xee\x36\xff\xc8\x5f\x31\x8b\xfd\x3b\x15\xf6\x0f\xfb\xc9\x3e\xcf\x81\x6b\xf8\xbb\xee\xbb\x18\x9f\xe7\xaf\xa2\x4f\x2d\x7f\xb3\x4e\xf9\x93\x2e\xf6\x43\xbd\xf5\xc9\x7f\xdb\xc5\xfe\xbd\x75\xca\xbf\xe8\x62\x3f\x56\xa7\xfc\xdf\xb9\xd8\xff\x62\x9d\xf2\x7d\x42\x2d\x3f\x52\xa7\xfc\x23\x9a\x5a\x7e\xa2\x4e\xf9\xfb\x5d\xe4\xcf\xd6\x29\x1f\x74\x19\xff\xeb\xbd\xea\xfe\xfc\xfc\xfc\xb2\x8b\xfd\x79\x17\x79\x4e\x87\xf1\xde\x96\xff\x16\x20\x1f\xb2\xd4\x8f\xbd\x96\xf8\x37\x6e\x26\xfe\x3f\x00\x00\xff\xff\x30\x48\xc9\x24\xb8\x4d\x00\x00")

func tcptracerEbpfOBytes() ([]byte, error) {
	return bindataRead(
		_tcptracerEbpfO,
		"tcptracer-ebpf.o",
	)
}

func tcptracerEbpfO() (*asset, error) {
	bytes, err := tcptracerEbpfOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tcptracer-ebpf.o", size: 19896, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tcptracer-ebpf.o": tcptracerEbpfO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tcptracer-ebpf.o": &bintree{tcptracerEbpfO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

